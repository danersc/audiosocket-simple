# Sistema de Ramais Dinâmicos para AudioSocket

Este documento explica como configurar e usar o novo sistema de ramais dinâmicos para o AudioSocket.

## Visão Geral

O sistema de ramais dinâmicos permite:

1. Configurar múltiplos ramais de IA em um mesmo servidor
2. Associar diferentes ramais a diferentes condomínios
3. Gerenciar automaticamente portas e conexões
4. Aplicar alterações de configuração sem reiniciar o sistema

## Configuração do Banco de Dados

As configurações de ramais são armazenadas na tabela `extension_ia` com a seguinte estrutura:

```sql
create table public.extension_ia
(
    extension_ia_id          integer generated always as identity,
    extension_ia_number      char(50) not null, -- Ramal da IA
    extension_ia_return      char(50) not null, -- Ramal de retorno 
    extension_ia_ip          char(50) not null, -- IP do servidor (normalmente 0.0.0.0)
    extension_ia_number_port char(50) not null, -- Porta para o ramal da IA
    condominium_id           integer  not null, -- ID do condomínio
    extension_ia_return_port char(50)           -- Porta para o ramal de retorno
);
```

## Configuração do .env

Copie o arquivo `.env.example` para `.env` e ajuste as configurações conforme necessário:

```
DB_NAME=postgres
DB_USER=admincd
DB_PASSWORD=Isabela@2022!!
DB_HOST=dev-postgres-cd.postgres.database.azure.com
DB_PORT=5432
API_PORT=8082
```

## Execução

Para iniciar o sistema com suporte a ramais dinâmicos:

```bash
python main_dynamic.py
```

O sistema irá:
1. Conectar ao banco de dados PostgreSQL
2. Carregar todas as configurações de ramais ativos
3. Iniciar servidores socket para cada ramal configurado
4. Iniciar um servidor API na porta 8082 para gerenciamento

## API de Gerenciamento

A API permite gerenciar ramais em tempo real, incluindo:

### 1. Obter status dos ramais ativos
```
GET /api/status
```

### 2. Atualizar configurações do banco de dados
```
POST /api/refresh
```

### 3. Listar todas as configurações de ramais no banco
```
GET /api/extensions
```

### 4. Reiniciar um ramal específico
```
POST /api/restart
Body: {"extension_id": 123} ou {"ramal": "1001"}
```

## Fluxo de Inicialização

1. O sistema conecta ao banco e carrega as configurações
2. Se não conseguir acessar o banco, usa as configurações salvas localmente
3. Se nenhuma configuração for encontrada, usa uma configuração padrão (porta 8080/8081)
4. Inicia um servidor socket para cada ramal (visitante e retorno)
5. Disponibiliza a API para gerenciamento

## Persistência Local

As configurações são salvas localmente em `./data/ramais_config.json` para permitir a inicialização mesmo sem acesso ao banco de dados.

## Logs

Os logs são salvos em `./logs/audiosocket.log` e mostram informações detalhadas sobre:
- Inicialização dos servidores
- Conexões recebidas
- Associação entre call_id e ramais
- Atualizações de configuração

## Resiliência

O sistema é resiliente a:
- Falhas de conexão com banco de dados
- Portas já em uso (tenta portas alternativas)
- Reinicializações do servidor

## Como Funciona

Quando uma chamada chega em uma determinada porta:
1. O sistema identifica o ramal associado àquela porta
2. Associa o call_id (UUID) da chamada ao ramal identificado
3. Quando for necessário fazer uma chamada de retorno, usa o ramal de retorno correto
4. Todas as sessões mantêm informações sobre qual ramal estão usando